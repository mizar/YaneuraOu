
## 2017/04/21


・対技巧でパラメーターチューニング
z:\script>c:/Python27/python.exe analyze_result_log.py ../result_log
....................................................................................................
  total : 3394 - 32 - 1574(68.32% R133.48)
PARAM_PROBCUT_DEPTH:
  4 : 1142 - 13 - 552(67.41% R126.29)
  5 : 1078 - 11 - 492(68.66% R136.26)
  6 : 1174 - 8 - 530(68.9% R138.16)
PARAM_PROBCUT_MARGIN:
  212 : 678 - 6 - 305(68.97% R138.77)
  214 : 675 - 8 - 312(68.39% R134.06)
  216 : 662 - 8 - 323(67.21% R124.66)
  218 : 682 - 4 - 333(67.19% R124.54)
  220 : 697 - 6 - 301(69.84% R145.87)
PARAM_PRUNING_BY_HISTORY_DEPTH:
  8 : 1149 - 9 - 517(68.97% R138.73)
  9 : 1145 - 11 - 545(67.75% R128.96)
  10 : 1100 - 12 - 512(68.24% R132.85)
PARAM_REDUCTION_ALPHA:
  127 : 646 - 4 - 330(66.19% R116.69)
  129 : 641 - 6 - 335(65.68% R112.73)
  131 : 684 - 6 - 299(69.58% R143.75)
  133 : 696 - 6 - 309(69.25% R141.06)
  135 : 727 - 10 - 301(70.72% R153.19)
PARAM_FUTILITY_MOVE_COUNT_ALPHA0:
  238 : 714 - 6 - 319(69.12% R139.96)
  239 : 658 - 8 - 298(68.83% R137.6)
  240 : 696 - 9 - 304(69.6% R143.89)
  241 : 708 - 3 - 319(68.94% R138.5)
  242 : 618 - 6 - 334(64.92% R106.9)
PARAM_FUTILITY_MOVE_COUNT_ALPHA1:
  498 : 686 - 4 - 348(66.34% R117.9)
  499 : 632 - 9 - 333(65.49% R111.31)
  500 : 645 - 6 - 282(69.58% R143.72)
  501 : 732 - 8 - 323(69.38% R142.12)
  502 : 699 - 5 - 288(70.82% R154.03)
PARAM_FUTILITY_MOVE_COUNT_BETA0:
  736 : 654 - 3 - 302(68.41% R134.23)
  738 : 683 - 6 - 334(67.16% R124.27)
  740 : 644 - 6 - 310(67.51% R127.01)
  742 : 692 - 14 - 303(69.55% R143.47)
  744 : 721 - 3 - 325(68.93% R138.42)
PARAM_FUTILITY_MOVE_COUNT_BETA1:
  996 : 684 - 8 - 318(68.26% R133.05)
  998 : 648 - 10 - 321(66.87% R122.03)
  1000 : 708 - 7 - 304(69.96% R146.86)
  1002 : 680 - 2 - 281(70.76% R153.52)
  1004 : 674 - 5 - 350(65.82% R113.84)

### V4.35

チューニング完了。

・チューニング後、対技巧 4スレ5秒。
total : 4033 - 34 - 1625(71.28% R157.91)



Ryzen 8コア(論理16コア)にて

// prefetchなし

Total time (ms) : 61094
Nodes searched  : 27207336
Nodes/second    : 445335

> bench 1024 16
Total time (ms) : 44258
Nodes searched  : 179667725
Nodes/second    : 4059553
Nodes searched(main thread) : 11324212
Nodes/second  (main thread) : 255868

// prefetchあり

Total time (ms) : 58355
Nodes searched  : 27207336
Nodes/second    : 466238

> bench 1024 16
Total time (ms) : 54807
Nodes searched  : 226393803
Nodes/second    : 4130746
Nodes searched(main thread) : 11923099
Nodes/second  (main thread) : 217547

// eval hash、prefetchあり

Total time (ms) : 57458
Nodes searched  : 27207336
Nodes/second    : 473516

> bench 1024 16

Total time (ms) : 31393
Nodes searched  : 148282761
Nodes/second    : 4723433
Nodes searched(main thread) : 9249663
Nodes/second  (main thread) : 294640

Total time (ms) : 28043
Nodes searched  : 129733738
Nodes/second    : 4626243
Nodes searched(main thread) : 8099409
Nodes/second  (main thread) : 288821

// eval hash、prefetch有効のほうがいいかも知れん..


## 2017/04/21

・EngineNuma、やはり設定できないと、他ソフトの対局のときにNuma指定できなくて困るのか…。あらら？
	→　そうでもないか。

		start /B /WAIT /NODE %EXECUTOR_NUMBER% c:/python27/python.exe %YANEHOME%\script\engine_invoker4.py home:%YANEHOME% engine1:%ENGINE1% eval1:%EVAL1%  engine2:%ENGINE2% eval2:%EVAL2% cores:%HT_CORES% loop:%LOOP% numa:%EXECUTOR_NUMBER% engine_threads:%ENGINE_THREADS% hash1:%ENGINE_HASH1% hash2:%ENGINE_HASH2% time:%TIMES% book_moves:%BOOK_MOVES% rand_book:1 PARAMETERS_LOG_FILE_PATH:%YANEHOME%\result_log\param_%BUILD_NUMBER%
		start /B /WAIT /NODE %EXECUTOR_NUMBER% move *.sfen %YANEHOME%\kif

・TTのprefetch、追加する

- 4771

// prefetchなし
===========================
Total time (ms) : 18180
Nodes searched  : 12421760
Nodes/second    : 683265
Nodes/second    : 706785
Nodes/second    : 717688

// prefetchあり
Nodes/second    : 721105
Nodes/second    : 724343

// prefetchあり、eval hashあり
Nodes searched  : 12421760
Nodes/second    : 699738
Nodes/second    : 692637

> bench 1024 8 16
Total time (ms) : 24520
Nodes searched  : 74895345
Nodes/second    : 3054459
Nodes searched(main thread) : 9394930
Nodes/second  (main thread) : 383153
Nodes searched(main thread) : 9924828
Nodes/second  (main thread) : 378781

Nodes searched(main thread) : 10324092
Nodes/second  (main thread) : 384409
Nodes searched(main thread) : 20745383
Nodes/second  (main thread) : 353895

// lazy SMPで伸びないのはeval hashの都合もあるのか…。

// eval hashをONにするとめっちゃ遅い。なんで？
Nodes searched(main thread) : 12163807
Nodes/second  (main thread) : 260852

// eval hashのkeyを計算する部分、これだと2個に1個が無駄になってる
-		const Key keyExcludeTurn = st->key() & ~1; // 手番を消した局面hash key
+		const Key keyExcludeTurn = st->key() >> 1; // 手番を消した局面hash key
修正。

eval hash、20%もhitしてるのに遅いな…。
hitしたあとの差分計算が出来てなかったり？

// st->sumと書いていたところsumに変更した。

Nodes searched(main thread) : 8100708
Nodes/second  (main thread) : 401223
// よくわからない。あとでRyzenでベンチとる。


### V4.32

・Ryzenでベンチとる。(あとで)


## 2017/04/19

- Singular extension and check extension tweak
	- https://github.com/official-stockfish/Stockfish/commit/30c583204f97da2c67b5042c30327013e70ae209

- Skip quiet moves based on moveCount pruning threshold and history stats
	- https://github.com/official-stockfish/Stockfish/commit/352bd6f5aa348e15909f50266fc5bdc003df35bf

- Penalty for a quiet ttMove that fails low
	- https://github.com/official-stockfish/Stockfish/commit/5254a6040c59cf7d3b9faa847168ccbd628c0574

- Simplify skipping of plies with helper threads
	- https://github.com/official-stockfish/Stockfish/commit/1810c4d758674dc4de288ca782851e52874f8908

- Further simplify skipping of plies with threads
	- https://github.com/official-stockfish/Stockfish/commit/cc76524c2e36345fcbf5fcdd3618a5dafd166b62

- Check for overflow in Score * int multiplication
	- https://github.com/official-stockfish/Stockfish/commit/d2971f3fca929d9085ed17b71aa4ec8e96499d99
	- 序盤と終盤のスコア内分してないのでこれ意味ないな…。

- Prefer std::find over a hand-coded loop
	- https://github.com/official-stockfish/Stockfish/commit/57a3334322df005d567fc7db9afef82c495df83d

- Move-Count Formula Tweak
	- https://github.com/official-stockfish/Stockfish/commit/9d3ed9ed2ef97fda99183c1290fd4f51dac55180

// 以上で、最新のStockfish(2017/4/18)に追いついた。

### V4.31

engine1 = YaneuraOuV426.exe , eval = ShinYane20161117
engine2 = YaneuraOuV431.exe , eval = ShinYane20161117
T1,b1000,2540 - 86 - 2374(51.69% R11.74) win black : white = 52.87% : 47.13%
T4,b1000,1238 - 104 - 1308(48.63% R-9.55) win black : white = 50.32% : 49.68%

1スレッドで負け越したの少し気になるが。探索パラメーター、再度調整すべき。


## 2017/04/18

- Penalty for a quiet ttMove that fails low
	- https://github.com/official-stockfish/Stockfish/commit/5254a6040c59cf7d3b9faa847168ccbd628c0574

				// fails lowのときのquiet ttMoveに対するペナルティ
				else if (!pos.capture_or_promotion(ttMove))
				{
					Value penalty = -stat_bonus(depth);
					thisThread->history.update(pos.side_to_move(), ttMove, penalty);
					update_cm_stats(ss, pos.moved_piece_after(ttMove), to_sq(ttMove), penalty);
				}

- update_cm_stats() 書き換え
- HistoryStats削除
- history周り、大改造。

- Standardize stat penalty
	- https://github.com/official-stockfish/Stockfish/commit/35b77b120ef5ca5d9db848e02e42642b1a93e982

- Always have counterMoves associated
	- https://github.com/official-stockfish/Stockfish/commit/d490bb99734bd6e2f8a0a352d2f3f1ba264ece66

- Allow pruning advance pawn pushes if not near endgame
	- https://github.com/official-stockfish/Stockfish/commit/3627348e2b4633604a878b0e5397acb6218a6afc
	- 将棋では関係なさげ。

- Remove HistoryStats
	- https://github.com/official-stockfish/Stockfish/commit/e0504ab876a997321102f040ab88203cb893db12

- Rename FromTo -> History
	- https://github.com/official-stockfish/Stockfish/commit/34e47ca87d82a420043f2bc9a1960eb1fad5c4f4

- Simplify TT penalty stat
	- https://github.com/official-stockfish/Stockfish/commit/fa24cc25a43da5ac41a086edda02dfc2e8e9b830

### V4.30

	engine1 = YaneuraOuV426.exe , eval = ShinYane20161117
	engine2 = YaneuraOuV430.exe , eval = ShinYane20161117
	T1,b1000,2357 - 79 - 2564(47.9% R-14.62) win black : white = 51.21% : 48.79%
	T4,b1000,1892 - 124 - 2044(48.07% R-13.42) win black : white = 51.22% : 48.78%

## 2017/04/18

- Removing CM parameter from the Stats struct. 
	- https://github.com/official-stockfish/Stockfish/commit/99cd513264be1ad61848bbefd678be0feaa08061

- A small tweak in doEasyMove()
	- https://github.com/official-stockfish/Stockfish/commit/a753e20bd4fc1e916f7e99884c01bb63fd7c1326
	- 影響は軽微で検証できない。

- search(): Move nullValue variable into local scope
	- https://github.com/official-stockfish/Stockfish/commit/83fb4547f640c63c2dbbf0d5637bd8d1cf216a60
	- すでにこうしてた。

- Drop Stats c'tors
	- https://github.com/official-stockfish/Stockfish/commit/3ab3e55bb5faf57aec864f3bb7268601c11d72be
	- スレッドオブジェクト生成のときにヒープがゼロクリアされているならコンストラクタでゼロクリアは不要なのだが。

- Razor Simplification
	- https://github.com/official-stockfish/Stockfish/commit/05cf45f2d137600387d5e560e22a464a84ad7b0d
	- razoringのところの
			&&  ttMove == MOVE_NONE
	を削除。

- Introduce assert for stats update
	- https://github.com/official-stockfish/Stockfish/commit/c5de4080dba8e9b3248f06bd6c168c22e9fbfd92

- Don't update TT at excluded move ply
	- https://github.com/official-stockfish/Stockfish/commit/ebe021f6a5da63cf0e31da89d4c21e9b5f673fcd

- Fix zugzwang pruning issues
	- https://github.com/official-stockfish/Stockfish/commit/72a501c6fe5e4e7b61291e9603d0c6cc0902e618
	- これ将棋で関係なさげ。
		&& pos.non_pawn_material(pos.side_to_move())


### V4.29

	engine1 = YaneuraOuV426.exe , eval = ShinYane20161117
	engine2 = YaneuraOuV429.exe , eval = ShinYane20161117
	T1,b1000,2545 - 108 - 2347(52.02% R14.07) win black : white = 51.63% : 48.37%
	T4,b1000,1986 - 132 - 1722(53.56% R24.78) win black : white = 50.65% : 49.35%

	counter moveのところのパラメーター変更になった影響で、全パラメーターを再調整しないと
	弱くなったままのような気がする…。あとで再調整する。


## 2017/04/17

- Ryzenに向けた最適化
	- AVX2用のevaluate()でも速度はほぼ変わらず。(AVX2用ではないほうが速いようだが)
	- attackers_to()がどうも遅い。原因はよくわからない。機を改めて調査する。

- attackers_to()のColorを取らないバージョン、バグってた。see_ge()実装以降バグっていたのか。修正。[1秒で+R25]
	- T1,b1000,910 - 51 - 1049(46.45% R-24.69)


- Help GCC to optimize msb() to single instruction
	- https://github.com/official-stockfish/Stockfish/commit/bf8b45fe6305c89a9a30f660de34164cf3bdcdf2

- Simplify pruning rule
	- https://github.com/official-stockfish/Stockfish/commit/e70da0d2eb20cffee505c4e7ef61399de7d3fa16
	- これ、このあと修正があるので採用せず。

- Another simplification for SEE pruning
	- https://github.com/official-stockfish/Stockfish/commit/8c61bbda54b0ec06cb05b89db4342d890dd21798

	// 浅い深さでの、危険な指し手を枝刈りする。
	else if (	depth < 7 * ONE_PLY
			&& !extension
			&& !pos.see_ge(move, Value(-PawnValue * (depth / ONE_PLY))))
			continue;

	→　YaneuraOuV426a , R50ぐらい弱くなった。なんぞこれ…。

- Use DEPTH_ZERO initializer for depth in qsearch 
	- https://github.com/official-stockfish/Stockfish/commit/ee22b61f5e90a180af942828feb83cef90ea5683
	- 強さには寄与せず

- Remove piece condition in decrease lmr reduction check
	- https://github.com/official-stockfish/Stockfish/commit/46d066b04190763339d5ede87018422a1ab7c7dc

		else if (!is_drop(move) // type_of(move)== NORMAL
	//	&& type_of(pos.piece_on(to_sq(move))) != PAWN

	→　YaneuraOuV426b

	engine1 = YaneuraOuV426b.exe , eval = ShinYane20161117
	engine2 = YaneuraOuV426.exe , eval = ShinYane20161117
	T1,b1000,2480 - 101 - 2419(50.62% R4.33) win black : white = 51.98% : 48.02%

- piecesCount
	- https://github.com/official-stockfish/Stockfish/commit/f72b7dc99af07c4f012ef229f9d3dcc490d6d69f
	- 将棋では関係なさげ。

- Explicitly use alpha+1 for beta in NonPV search
	- https://github.com/official-stockfish/Stockfish/commit/af7412e58a4ce374b5035d9bb1e8c47a108ff352
	- NonPVなのでalpha == beta - 1なので、明示的にalphaを用いる。強さには寄与しない。

- Clean-up skipEarlyPruning 
	- https://github.com/official-stockfish/Stockfish/commit/1b62d413c137bfa669922b6d52b92262d60020f1
	- 関数の引数のリファクタリング。強さには寄与しない。

- Simplify pruning
	- https://github.com/official-stockfish/Stockfish/commit/847bc0e80fa78a81b028515da03a90ea4dd40458
	- あとで変更があるのでこれは無視。

	engine1 = YaneuraOuV426c.exe , eval = ShinYane20161117
	engine2 = YaneuraOuV426.exe , eval = ShinYane20161117
	T1,b1000,2441 - 90 - 2469(49.71% R-1.98) win black : white = 52.15% : 47.85%
	T1,b3000,2445 - 146 - 2409(50.37% R2.58) win black : white = 51.21% : 48.79%


### V4.28

- Simplify threshold handling for probcut.
	- https://github.com/official-stockfish/Stockfish/commit/1ceaea701baaa79f378b0842ff0fb5d2a1f53ef7
	- 影響は軽微。

- Refactor bonus and penalty calculation
	- https://github.com/official-stockfish/Stockfish/commit/a47bbca0ea40ac007d64682c3ba51fa4158b2d3f
	- あとで再度調整があるので、これは採用しない。

- Threefold repetition detection
	- https://github.com/official-stockfish/Stockfish/commit/881a9dfb0a8fec3b1472791e2d98415e4a9a182a
	- 千日手チェックの高速化だが、これと同等のことはすでにやっているので採用せず。

- Don't clear EasyMove in search()
	- https://github.com/official-stockfish/Stockfish/commit/b7b9d7c9c72a987bb497ec2b629d885a06238aa2

- Tweak best thread selection logic
	- https://github.com/official-stockfish/Stockfish/commit/1052ce74f65479e5d583d349227dc101f8483a85
- Simplified select best thread 
	- https://github.com/official-stockfish/Stockfish/commit/d39ffbeea6ad54c90123a352d50b65c5bda1561b
	- これ、複数スレッドでないと動作検証できない。


- Use consistent variable names for counterMoveStats 
	- https://github.com/official-stockfish/Stockfish/commit/6b16ebc82566a69b9336cca6aa7a19ab1824b85d
	- 名前の変更だけ。

- Correct zero-init of Thread data members
	- https://github.com/official-stockfish/Stockfish/commit/fe99de20ff8f0594a17e2cedf680d25e86dd5a13
	- 影響なし。

- Zero init fromToStats in constructor. 
	- https://github.com/official-stockfish/Stockfish/commit/90b052462cc473ee03df0e1613d1c9f81ca99887
	- あまり影響はないが、以下の部分、コメントアウトした。
		//	th->fromTo.clear();

- Correctly zero-initialize MainThread
	- https://github.com/official-stockfish/Stockfish/commit/1c316c41bb0b3a1522aecd0dd2447009f976ebd7
	- もとより、こんなことはしてなかった。

	engine1 = YaneuraOuV428.exe , eval = ShinYane20161117
	engine2 = YaneuraOuV426.exe , eval = ShinYane20161117
	T1,b1000,2444 - 83 - 2473(49.71% R-2.05) win black : white = 52.5% : 47.5%

// スレッド増やすと落ちる。何故？あとで調査する。
// →　投了のbestmove resignが返ってこない。
// →　main thread以外、resignの指し手をrootMovesにpushしてないからアクセス違反になってた。修正。

	position startpos moves 2g2f 3c3d 2f2e 2b3c 7g7f 3a2b 6i7h 4a3b 3i4h 8c8d 8h3c+ 2b3c 7i8h 7c7d 3g3f 7a6b 4g4f 5a4b 4h4g 8a7c 9g9f 6c6d 8h7g 6b6c 2i3g 1c1d 2h2i 8b8a 1g1f 9c9d 4i4h 6a6b 5i4i B*6i 7h8h 7c6e 7g6f 8d8e B*6h 8e8f 6h8f 6i4g+ 4h4g S*8e 8f5i 8e7f 4i5h 7f8g P*8b 8a8b B*7a 8b8c 7a6b+ 8g8h+ G*8d 8c8b 6b7c 8b8a 7c6c 8a8d 3g4e G*5b 4e5c+ 5b5c S*5a 4b5a 6c7c 5a4b 7c8d 4b3a 4g3g 3a2b 8i7g 3d3e 7g6e 6d6e 2e2d 2c2d N*4e 3e3f 4e3c+ 2a3c 3g3f S*3h 2i2d P*2c 2d7d 6e6f P*3d S*4g 5h6h G*7h 7d7h 8h7h 6h7h 6f6g+ 7h8g 4g3f 3d3c+ 3b3c P*3d 3c3d N*2f 5c4d 2f3d 4d3d R*5b G*3b S*4a P*3a 4a3b+ 3a3b S*3a 2b1c 5b3b+ R*8i P*8h 8i5i+ 3b3d 6g7g 8g8f 7g7f 8f7f P*7e 8d7e B*5h P*6g N*8d 7e8d 5i7i P*7g N*6d 7f6e N*7c 8d7c 5h4g+ 6e6d 4g4f 6d5c S*6d 7c6d 4f6d 5c6d B*2h 6d5c 2h6d+ 3d6d P*5b 5c4b P*3d B*3c 1d1e 3a2b 1c1b G*1c
	go btime 0 wtime 0 byoyomi 3000


	engine1 = YaneuraOuV426.exe , eval = ShinYane20161117
	engine2 = YaneuraOuV428c.exe , eval = ShinYane20161117
	T4,b1000,971 - 62 - 1037(48.36% R-11.42) win black : white = 51.6% : 48.4%

